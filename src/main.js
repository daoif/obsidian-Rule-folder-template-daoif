/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var mplugin;
var DEFAULT_SETTINGS = {
  \u65B0\u6587\u6863\u6839\u76EE\u5F55: "",
  \u6A21\u677F\u6587\u4EF6\u8DEF\u5F84: ""
};
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      mplugin = this;
      const ribbonIconEl = this.addRibbonIcon("pane-layout", "\u89C4\u5219\u6587\u4EF6\u5939\u6A21\u677F", (evt) => {
        new \u89C4\u52191\u6A21\u6001\u6846(this.app).open();
      });
      ribbonIconEl.addClass("my-plugin-ribbon-class");
      this.addCommand({
        id: "open-month-rule-create-fold",
        name: "\u6708\u4EFD\u89C4\u5219",
        callback: () => {
          new \u89C4\u52191\u6A21\u6001\u6846(this.app).open();
        }
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var \u89C4\u52191\u6A21\u6001\u6846 = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.app = app;
  }
  onOpen() {
    return __async(this, null, function* () {
      const { titleEl } = this;
      const { contentEl } = this;
      const mythis = this;
      titleEl.setText("\u8BF7\u8F93\u5165\u6587\u4EF6\u540D");
      const controlEl = contentEl.createEl("div");
      controlEl.style.cssText = "width:300px;height:40px;margin:0 auto;";
      const input = controlEl.createEl("input");
      input.style.cssText = "width:300px;height:40px;margin:0 auto;font-size:22px;";
      input.focus();
      input.addEventListener("keydown", keydown);
      function keydown(event) {
        if (event.keyCode == 13) {
          \u6267\u884C\u51FD\u6570(input.value);
          mythis.close();
        }
      }
      function \u6267\u884C\u51FD\u6570(\u8F93\u5165\u6587\u4EF6\u540D) {
        return __async(this, null, function* () {
          if (\u8F93\u5165\u6587\u4EF6\u540D == null) {
            return "";
          }
          var \u6307\u5B9A\u8DEF\u5F84 = mplugin.settings.\u65B0\u6587\u6863\u6839\u76EE\u5F55;
          var \u6587\u6863\u6A21\u677F = mplugin.settings.\u6A21\u677F\u6587\u4EF6\u8DEF\u5F84;
          var \u5F85\u590D\u5236\u6587\u672C = yield \u521B\u5EFA\u6587\u6863(\u6307\u5B9A\u8DEF\u5F84, \u6587\u6863\u6A21\u677F);
          console.log("\u5F85\u590D\u5236\u6587\u672C" + \u5F85\u590D\u5236\u6587\u672C);
          navigator.clipboard.writeText(\u5F85\u590D\u5236\u6587\u672C);
          function \u683C\u5F0F\u5316\u65F6\u95F4(date) {
            var \u62FC\u63A5 = "";
            var \u65E5\u671F = date.getDate();
            var \u6708 = date.getUTCMonth() + 1;
            var \u5E74 = date.getFullYear();
            \u62FC\u63A5 = "-" + \u5E74 + "-" + \u6708 + "-" + \u65E5\u671F;
            return \u62FC\u63A5;
          }
          function \u521B\u5EFA\u6587\u6863(\u6307\u5B9A\u8DEF\u5F842, \u6307\u5B9A\u6587\u6863\u6A21\u677F) {
            return __async(this, null, function* () {
              var date = new Date();
              var y = date.getFullYear();
              var \u5E74\u8DEF\u5F84 = "\\" + y;
              var m = date.getMonth() + 1;
              var \u6708\u8DEF\u5F84 = "\\" + m;
              var \u5168\u8DEF\u5F84 = \u6307\u5B9A\u8DEF\u5F842 + \u5E74\u8DEF\u5F84 + \u6708\u8DEF\u5F84;
              mythis.app.vault.createFolder(\u5168\u8DEF\u5F84);
              let date2 = new Date();
              var \u65F6\u95F4\u540E\u7F00 = \u683C\u5F0F\u5316\u65F6\u95F4(date2);
              var \u521B\u5EFA\u6587\u4EF6\u540D = \u5168\u8DEF\u5F84 + "\\" + \u8F93\u5165\u6587\u4EF6\u540D + \u65F6\u95F4\u540E\u7F00 + ".md";
              var \u6587\u6863\u5185\u5BB9 = yield mythis.app.vault.read(mythis.app.vault.getAbstractFileByPath(\u6587\u6863\u6A21\u677F));
              \u6587\u6863\u5185\u5BB9 = \u66FF\u6362\u5185\u5BB9(\u6587\u6863\u5185\u5BB9);
              mythis.app.vault.create(\u521B\u5EFA\u6587\u4EF6\u540D, \u6587\u6863\u5185\u5BB9);
              var \u5F85\u590D\u5236\u6587\u672C2 = "[[" + \u8F93\u5165\u6587\u4EF6\u540D + \u65F6\u95F4\u540E\u7F00 + "|" + \u8F93\u5165\u6587\u4EF6\u540D + "]]";
              return \u5F85\u590D\u5236\u6587\u672C2;
            });
          }
          function \u66FF\u6362\u5185\u5BB9(\u539F\u6587\u672C) {
            var \u65B0\u5185\u5BB9 = \u539F\u6587\u672C.replace("%ruleName%", \u8F93\u5165\u6587\u4EF6\u540D);
            return \u65B0\u5185\u5BB9;
          }
        });
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u89C4\u5219\u6587\u4EF6\u5939\u6A21\u677F" });
    new import_obsidian.Setting(containerEl).setName("\u65B0\u6587\u6863\u6839\u76EE\u5F55").setDesc("\u4E3E\u4F8B1:\u9879\u76EE    \u4E3E\u4F8B2:\u9879\u76EE/\u5B50\u6587\u4EF6\u5939").addText((text) => text.setPlaceholder("\u7559\u7A7A\u5C06\u521B\u5EFA\u5728\u6839\u76EE\u5F55\u4E0B.").setValue(this.plugin.settings.\u65B0\u6587\u6863\u6839\u76EE\u5F55).onChange((value) => __async(this, null, function* () {
      console.log("Secret: " + value);
      this.plugin.settings.\u65B0\u6587\u6863\u6839\u76EE\u5F55 = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u677F\u6587\u4EF6\u8DEF\u5F84").setDesc("\u4E3E\u4F8B1:\u6A21\u677F/\u6A21\u677F\u6587\u4EF61.md   \u66FF\u6362\u5217\u8868:<ruleName>=\u6587\u4EF6\u540D").addText((text) => text.setPlaceholder("\u7559\u7A7A\u5C06\u521B\u5EFA\u7A7A\u6587\u4EF6.").setValue(this.plugin.settings.\u6A21\u677F\u6587\u4EF6\u8DEF\u5F84).onChange((value) => __async(this, null, function* () {
      console.log("Secret: " + value);
      this.plugin.settings.\u6A21\u677F\u6587\u4EF6\u8DEF\u5F84 = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
